#yank-yaml0.1
---
metadata:
  title:
  email:

# Separate options / yank block, or put all yank/repex/alchemy at base level?
options:
  yank:
    minimize: yes
    output_directory: /path/to/output/
  repex:
    timestep: 1.0 * femtoseconds
    nsteps_per_iteration: 2500
    niterations: 1000
  alchemy:
    annihilate_sterics: False
    annihilate_electrostatics: True

molecules:
  abl-2hyy:
    rcsbid: 2hyy
    select: "chain A"
    mutations: "ASP-137-ASH"
    parameters: ['amber99sbildn.xml', 'ions.xml']
    loopoptions: stuff for loop refinement

  imatinib:
    filename: gleevec.smiles
    epik: 0  # take 0th state from epik for protonation
    parameters: antechamber/paramchem
  bosutinib:
    prmtop: bosu.prmtop      or      charmmpsf: bosu.psf
    inpcrd: bosu.inpcrd      or      charmmpdb: bosu.pdb

  p38-schrodinger:
    filename: p38_protein.pdb
  p38-ligands:
    filename: p32_ligands.sdf
    select: [p38a_2n, p38a_3flz, p38a_2h]  # how do we handle multi-molecules files?

solvents:
  vacuum:
    nonbondedMethod: NoCutoff
  PMEtip3p:
    nonbondedMethod: PME
    solvate: PME
    solventmodel: tip3p
    salt:
      NaCl: 150*millimolar
      MgCl2: 10*millimolar
    clearance: 10*angstroms
  RFtip3p:
    nonbondedMethod: RF
    solventmodel: tip3p
    salt:
      NaCl: 150*millimolar
      MgCl2: 10*millimolar
    clearance: 10*angstroms
  PMEtip4p:
    nonbondedMethod: PME
    solventmodel: tip4p
    salt:
      KCl: 150*millimolar
    clearance: 10*angstroms
  GBSAobc1:
    nonbondedMethod: NoCutoff
    gbsamodel: obc1
  GBSAobc2:
    nonbondedMethod: NoCutoff
    gbsamodel: obc2

phases:
  vacuum: [ligand]
  solvent: [ligand, water]
  complex: [receptor, ligand, water]
  octanol: [ligand, octanol]

# we can have pre-set alchemical protocols similarly to phases
alchemical_protocols:
  standard_protocol:
    lambda_electrostatics: [1.0, 0.9, 0.8, ...]
    lambda_sterics: [1.0, 0.9, 0.8, ...]
  20states_protocol:
    lambda_electrostatics: [1.0, 0.95, 0.9, ...]
    lambda_sterics: [1.0, 0.95, 0.9, ...]

# The names in components, alchemical_transformation and alchemical_atoms
# are searched both in molecules and in experiment.components. Pre-set
# phases don't have to be explicitly defined and can be overwritten by
# the user. For pre-set phases alchemical_atoms and alchemical_protocol
# assume their default values.
phases:
  # Pre-set phases equivalents, these don't actually have to be defined
  # -------------------------------------------------------------------
  absolute_binding: &default_absolute_binding_phase
    components: [solvent, receptor, molecule]
    alchemical_transformation: molecule->null
  absolute_solvation: &default_absolute_solvation_phase
    components: [solvent, molecule]
    alchemical_transformation: molecule->null
  relative_binding: &default_relative_binding_phase
    components: [solvent, static, molecule1]
    alchemical_transformation: molecule1->molecule2
  relative_solvation: &default_relative_solvation_phase
    components: [solvent, molecule1]
    alchemical_transformation: molecule1->molecule2
  phase_change: &default_phase_change_phase
    components: [solvent1, molecule]
    alchemical_transformation: solvent1->solvent2

  # User-defined phases examples
  # ----------------------------
  bosutinib-afatinib:
    components: [vacuum, abl-2hyy, bosutinib]
    alchemical_transformation: bosutinib->afatinib
    alchemical_atoms: auto
  imatinib-bosutinib:
    components: [vacuum, abl-2hyy, imatinib]
    alchemical_transformation: imatinib->bosutinib
    alchemical_atoms:
      dummy_atoms: [imatinib12, imatinib13, bosutinb14]
      transform_atoms: [imatinib15->bosutinib16, imatinib17->bosutinib18]
    alchemical_protocol: 20states_protocol

  # User-defined that "extend" pre-set phases using anchors
  # -------------------------------------------------------
  relative_complex1000:
    <<: *default_relative_binding_phase
    alchemical_protocol: 20states_protocol
    phase_options:
      repex.niterations: 1000
  relative_complex2000:
    <<: *default_relative_binding_phase
    alchemical_protocol: 20states_protocol
    phase_options:
      repex.niterations: 2000
  relative_solvent:
    <<: *default_relative_solvation_phase
    phase_options:
      repex.niterations: 200

# An example of experiment that uses only pre-set phases. The default alchemical
# factory can be easily inferred from the phase and appropriate default protocol
# can be used. In the future the user should be able to set its own alchemy class
# alchemical_factory: mymodule.MyAbsoluteAlchemicalFactory
basic_experiment:
  components:
    receptor: [abl-2hyy, src]
    ligand: [imatinib, afatinib, bosutinib]
    solvent: [PMEtip3p, RFtip3p, PMEtip4p, GBSAobc1, GBSAobc2]
  phases: [absolute_binding, absolute_solvation]

# An example of experiment with user-defined phases. The section "components" is not
# needed here since the user-defined phases use directly molecules
relative_experiment:
  hmr: [yes, no]
  phases: [imatinib-bosutinib, bosutinib-afatinib]

# A similar example that uses the section "components"
customized_experiment:
  components:
    static: abl-2hyy
    molecule1: imatinib
    molecule2: [bosutinib, afatinib]
    solvent: [PMEtip3p, RFtip3p, PMEtip4p, GBSAobc1, GBSAobc2]
  phases: [relative_complex1000, relative_complex2000, relative_solvent]

# An example of experiment with protein mutations using pre-set phases.
mutations_experiment:
  components:
    static: imatinib
    molecule1: abl-2hyy
    molecule2: [abl-2hyy:VAL31ALA, abl-2hyy:ASP137ASH]
    solvent: vacuum
  phases: [relative_binding, relative_solvation]

experiments: [basic_experiment, relative_experiment, customized_experiment]

